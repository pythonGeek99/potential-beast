$(document).ready(function() {
    // Convert Left Menu Items to Dropdown
    var n = ""; 
    $(".leftMenu ul li").each(function() {
        n += "<option value='" + $("a:first", this).attr("href") + "'>" + $("a:first", this).text() + "</option>";
    });

    if (n != "") {
        n = "<div class='select_producst_mobile'><select class='SubSelect'>" + n + "</select></div>";
        $(".content .container2 .section .leftMenu ul").after(n);
    }

    // Handle Dropdown Selection Change
    $(document).on("change", "select.SubSelect", function() {
        if ($(this).val() != "undefined") {
            location.href = $(this).val();
        }
    });

    // Initialize LayerSlider
    $("#layerslider").layerSlider({
        pauseOnHover: false,
        skinsPath: "/Content/C_ss/skins/v5/"
    });

    // Toggle Hamburger Menu
    $("#hamburger").click(function() {
        $(this).toggleClass("active");
        $("#menu").slideToggle(400);
    });

    // FAQ Section (Accordion Behavior)
    $(".faqItem").each(function() {
        $(this).removeClass("active");
    });

    $(".faqContent").each(function() {
        $(this).slideUp("slow");
    });

    $(".faqItem .faqTitle a").click(function() {
        var n = $(".faqItem .faqTitle a").index(this);

        if ($(".faqItem").eq(n).hasClass("active")) {
            $(".faqItem").eq(n).removeClass("active");
            $(".faqItem .faqContent").eq(n).slideUp("slow");
        } else {
            $(".faqItem").eq(n).addClass("active");
            $(".faqItem .faqContent").eq(n).slideToggle("slow");
        }

        return false;
    });

    // Initialize bxSlider Carousels
    $(".mainbxslider").bxSlider({
        auto: true,
        pager: false,
        infiniteLoop: true,
        controls: true
    });

    $(".mainMobilbxslider").bxSlider({
        auto: true,
        pager: true,
        infiniteLoop: true,
        controls: false
    });

    $(".bxslider").bxSlider({
        mode: "fade",
        hideControlOnEnd: false,
        captions: true,
        pager: false,
        controls: true
    });

    $(".newsbxslider").bxSlider({
        mode: "fade",
        hideControlOnEnd: false,
        captions: true,
        pager: true,
        controls: false
    });

    $(".workbxslider").bxSlider({
        mode: "fade",
        captions: true,
        pager: false,
        controls: true
    });

    $(".workbxslider2").bxSlider({
        mode: "fade",
        captions: true,
        pager: false,
        controls: true
    });
});

    // DOM Elements

    const rescueTrigger = document.getElementById('rescueTrigger');
    const rescueOverlay = document.getElementById('rescueOverlay');
    const rescueContainer = document.getElementById('rescueContainer');
    const rescueClose = document.getElementById('rescueClose');
    const toStep2 = document.getElementById('toStep2');
    const toStep3 = document.getElementById('toStep3');
    const painPointSelect = document.getElementById('painPoint');
    const step1 = document.getElementById('step1');
    const step2 = document.getElementById('step2');
    const step3 = document.getElementById('step3');
    const selectedProblem = document.getElementById('selectedProblem');
    const userName = document.getElementById('userName');
    const userEmail = document.getElementById('userEmail');

    // Open Modal
      rescueTrigger.addEventListener('click', () => {
        rescueOverlay.classList.add('active');
        rescueContainer.classList.add('active');
        document.body.style.overflow = 'hidden';
        
    
      });
      rescueTrigger2.addEventListener('click', () => {
        rescueOverlay.classList.add('active');
        rescueContainer.classList.add('active');
        document.body.style.overflow = 'hidden';
        
    
      });
        
   

    
    // Close Modal
    function closeRescueModal() {
      rescueOverlay.classList.remove('active');
      rescueContainer.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    rescueOverlay.addEventListener('click', closeRescueModal);
    rescueClose.addEventListener('click', closeRescueModal);
    
    // Step 1 → Step 2
    toStep2.addEventListener('click', () => {
      if (painPointSelect.value) {
        step1.classList.remove('active');
        step2.classList.add('active');
      } else {
        painPointSelect.style.borderColor = 'red';
        setTimeout(() => {
          painPointSelect.style.borderColor = '';
        }, 1000);
      }
    });
    
    // Step 2 → Step 3
    toStep3.addEventListener('click', () => {
      if (userName.value && userEmail.value) {
        // Update problem text in advisor card
        const problemText = {
          'ads': 'ad spend issues',
          'conversion': 'conversion problems',
          'retention': 'customer retention',
          'scaling': 'scaling roadblocks'
        }[painPointSelect.value];
        
        selectedProblem.textContent = problemText;
        
        // Send data to your CRM/email system
        fetch('https://your-api-endpoint.com/save-lead', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            name: userName.value,
            email: userEmail.value,
            painPoint: painPointSelect.value
          }),
        });
        
        step2.classList.remove('active');
        step3.classList.add('active');
        
        // Load Calendly
        loadCalendly();
      } else {
        if (!userName.value) {
          userName.style.borderColor = 'red';
        }
        if (!userEmail.value) {
          userEmail.style.borderColor = 'red';
        }
        setTimeout(() => {
          userName.style.borderColor = '';
          userEmail.style.borderColor = '';
        }, 1000);
      }
    });
    
    // 

    function showExitOffer() {
      if (!document.getElementById('exitOffer')) {
        const exitOffer = document.createElement('div');
        exitOffer.id = 'exitOffer';
        exitOffer.style.position = 'fixed';
        exitOffer.style.bottom = '20px';
        exitOffer.style.left = '20px';
        exitOffer.style.right = '20px';
        exitOffer.style.background = 'white';
        exitOffer.style.padding = '20px';
        exitOffer.style.borderRadius = '8px';
        exitOffer.style.boxShadow = '0 10px 30px rgba(0,0,0,0.2)';
        exitOffer.style.zIndex = '10002';
        exitOffer.innerHTML = `
          <h4 style="margin-top:0;">Wait! Get Your $5K Profit Checklist</h4>
          <p>Even if you don't book now, take this toolkit:</p>
          <input type="email" id="exitEmail" placeholder="Work email" style="width:50%;padding:12px;border:1px solid #ddd;border-radius:4px;margin-bottom:10px;">
          <button onclick="sendExitOffer()" style="background:var(--accent);color:white;border:none;padding:12px;border-radius:4px;width:100%;font-weight:bold;">Send My Checklist →</button>
        `;
        document.body.appendChild(exitOffer);
      }
    }

    window.sendExitOffer = function() {
      const exitEmail = document.getElementById('exitEmail').value;
      if (exitEmail) {
        fetch('https://your-api-endpoint.com/save-exit-lead', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            email: exitEmail,
            type: 'exit_offer'
          }),
        });
        document.getElementById('exitOffer').innerHTML = `
          <p style="color:var(--accent);font-weight:bold;">✓ Checklist sent to ${exitEmail}!</p>
        `;
        setTimeout(() => {
          document.getElementById('exitOffer').remove();
        }, 3000);
      }
    };
    

    // Add this to your existing script
function updateProgress(step) {
  const thumb = document.querySelector('.progress-thumb');
  const steps = document.querySelectorAll('.progress-steps .step');
  const cartIcon = document.querySelector('.cart-icon');
  
  // Calculate percentage based on step (1=0%, 2=50%, 3=100%)
  const percentages = ['7%', '52%', '95%'];
  thumb.style.width = percentages[step - 1];
  
  // Update step indicators
  steps.forEach((s, index) => {
    s.classList.toggle('active', index === step - 1);
  });
  
  // Animate cart icon
  cartIcon.classList.add('move');
  setTimeout(() => cartIcon.classList.remove('move'), 600);
}

// Modify your existing step transition code:
toStep2.addEventListener('click', () => {
  if (painPointSelect.value) {
    updateProgress(2); // <-- Add this line
    step1.classList.remove('active');
    step2.classList.add('active');
  }
});

toStep3.addEventListener('click', () => {
  const email = userEmail.value.trim();
  const name = userName.value.trim();
  const emailError = document.getElementById('emailError');

  emailError.style.display = 'none';
  userEmail.classList.remove('error');

  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

  let valid = true;

  if (!name || !email) {
    emailError.textContent = 'Please fill in both name and email.';
    emailError.style.display = 'block';
    if (!email) userEmail.classList.add('error');
    valid = false;
  } else if (!emailRegex.test(email)) {
    emailError.textContent = 'Please enter a valid email address (e.g., name@example.com).';
    emailError.style.display = 'block';
    userEmail.classList.add('error');
    valid = false;
  }

  if (valid) {
    updateProgress(3);
    step2.classList.remove('active');
    step3.classList.add('active');
  }
});

// Initialize progress on modal open
rescueTrigger.addEventListener('click', () => {
  updateProgress(1); // <-- Add this line
  // ... rest of your existing code
});
// In your updateProgress() f
document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector('.isolated-testimonials');
  if (!container) return;

  // Elements
  const wrapper = container.querySelector('.it-swiper-wrapper');
  const slides = container.querySelectorAll('.it-slide');
  const pagination = container.querySelector('.it-pagination');
  const nextBtn = container.querySelector('.it-button-next');
  const prevBtn = container.querySelector('.it-button-prev');
  
  // State
  let currentIndex = 0;
  let isDragging = false;
  let startPos = 0;
  let currentTranslate = 0;
  let prevTranslate = 0;
  let animationID;
  
  // Create pagination bullets
  slides.forEach((_, index) => {
    const bullet = document.createElement('div');
    bullet.classList.add('it-pagination-bullet');
    if (index === 0) bullet.classList.add('it-pagination-bullet-active');
    bullet.addEventListener('click', () => goToSlide(index));
    pagination.appendChild(bullet);
  });

  // Set up event listeners
  wrapper.addEventListener('mousedown', dragStart);
  wrapper.addEventListener('touchstart', dragStart);
  wrapper.addEventListener('mouseup', dragEnd);
  wrapper.addEventListener('mouseleave', dragEnd);
  wrapper.addEventListener('touchend', dragEnd);
  wrapper.addEventListener('mousemove', drag);
  wrapper.addEventListener('touchmove', drag);
  nextBtn.addEventListener('click', nextSlide);
  prevBtn.addEventListener('click', prevSlide);

  // Prevent image drag
  container.querySelectorAll('img').forEach(img => {
    img.addEventListener('dragstart', (e) => e.preventDefault());
  });

  // Functions
  function dragStart(e) {
    if (e.type === 'touchstart') {
      startPos = e.touches[0].clientX;
    } else {
      startPos = e.clientX;
      e.preventDefault();
    }
    isDragging = true;
    animationID = requestAnimationFrame(animation);
    wrapper.style.cursor = 'grabbing';
    wrapper.style.transition = 'none';
  }

  function drag(e) {
    if (!isDragging) return;
    const currentPosition = e.type === 'touchmove' ? e.touches[0].clientX : e.clientX;
    currentTranslate = prevTranslate + currentPosition - startPos;
  }

  function dragEnd() {
    if (!isDragging) return;
    isDragging = false;
    cancelAnimationFrame(animationID);
    wrapper.style.cursor = 'grab';
    
    const movedBy = currentTranslate - prevTranslate;
    if (movedBy < -100 && currentIndex < slides.length - 1) {
      currentIndex += 1;
    } else if (movedBy > 100 && currentIndex > 0) {
      currentIndex -= 1;
    }
    
    setPositionByIndex();
    wrapper.style.transition = 'transform 0.5s cubic-bezier(0.645, 0.045, 0.355, 1)';
  }

  function animation() {
    setSliderPosition();
    if (isDragging) requestAnimationFrame(animation);
  }

  function setSliderPosition() {
    wrapper.style.transform = `translateX(${currentTranslate}px)`;
  }

  function setPositionByIndex() {
    currentTranslate = currentIndex * -getSlideWidth();
    prevTranslate = currentTranslate;
    setSliderPosition();
    updatePagination();
  }

  function getSlideWidth() {
    return slides[0].offsetWidth + 
           parseInt(window.getComputedStyle(slides[0]).marginLeft) + 
           parseInt(window.getComputedStyle(slides[0]).marginRight);
  }

  function nextSlide() {
    if (currentIndex < slides.length - 1) {
      currentIndex += 1;
      setPositionByIndex();
    }
  }

  function prevSlide() {
    if (currentIndex > 0) {
      currentIndex -= 1;
      setPositionByIndex();
    }
  }

  function goToSlide(index) {
    currentIndex = index;
    setPositionByIndex();
  }

  function updatePagination() {
    const bullets = container.querySelectorAll('.it-pagination-bullet');
    bullets.forEach((bullet, index) => {
      bullet.classList.toggle('it-pagination-bullet-active', index === currentIndex);
    });
  }

  // Initialize
  setPositionByIndex();
  
  // Auto-rotate (optional)
  let autoRotate = setInterval(nextSlide, 5000);
  container.addEventListener('mouseenter', () => clearInterval(autoRotate));
  container.addEventListener('mouseleave', () => {
    autoRotate = setInterval(nextSlide, 5000);
  });
});
        
        // Premium micro-interactions for desktop cards
        document.querySelectorAll('.testimonial-card').forEach(card => {
            card.addEventListener('mousemove', (e) => {
                const x = e.clientX - card.getBoundingClientRect().left;
                const y = e.clientY - card.getBoundingClientRect().top;
                
                const centerX = card.offsetWidth / 2;
                const centerY = card.offsetHeight / 2;
                
                const angleX = (y - centerY) / 20;
                const angleY = (centerX - x) / 20;
                
                card.style.transform = `rotate3d(${angleX}, ${angleY}, 0, 3deg)`;
            });
            
            card.addEventListener('mouseleave', () => {
                // Return to original rotation
                const index = Array.from(card.parentNode.children).indexOf(card);
                const rotations = ['rotate(-2deg)', 'rotate(1deg)', 'rotate(-1deg)'];
                card.style.transform = rotations[index] || 'rotate(0)';
            });
        });
        
        // Animate elements on scroll
        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = 1;
                }
            });
        }, { threshold: 0.1 });
        
        document.querySelectorAll('.testimonial-card,  .section-header, .').forEach(el => {
            observer.observe(el);
        });
        
        // Parallax effect for carousel slides
        document.querySelectorAll('.swiper-slide').forEach(slide => {
            slide.addEventListener('mousemove', (e) => {
                const x = e.clientX - slide.getBoundingClientRect().left;
                const y = e.clientY - slide.getBoundingClientRect().top;
                
                const centerX = slide.offsetWidth / 2;
                const centerY = slide.offsetHeight / 2;
                
                const moveX = (x - centerX) / 20;
                const moveY = (y - centerY) / 20;
                
                slide.style.transform = `translateY(-5px) rotateX(${moveY}deg) rotateY(${-moveX}deg)`;
            });
            
            slide.addEventListener('mouseleave', () => {
                slide.style.transform = 'translateY(0) rotateX(0) rotateY(0)';
            });
        });


